--[[
    Author: https://github.com/Fernando-A-Rocha

    Collectibles - System (Client)

    /!\ Unless you know what you are doing, do not edit this file. /!\
]]

-- Internal Events
addEvent("collectibles:receive", true)
addEvent("collectibles:spawn", true)
addEvent("collectibles:actionOnPickedUp", true)
addEvent("collectibles:handlePickedUp", true)

local receivedCollectibles = {}
local texts = {}
local spawnedCollectibles = nil

local function outputDebugMsg(msg, theType)
    msg = "[Collectibles] " .. msg
    local r,g,b = 255, 255, 255
    if theType == "ERROR" then
        r,g,b = 255, 25, 25
    elseif theType == "WARNING" then
        r,g,b = 255, 255, 25
    end
    outputDebugString(msg, 4, r,g,b)
end

local function outputCustomText(name, ...)
    local info = texts[name]
    if not info then
        return
    end
    local text = info.text
    local r,g,b = info.r, info.g, info.b
    local formatWith = {...}
    if #formatWith > 0 then
        text = string.format(text, unpack(formatWith))
    end
    outputChatBox(text, r, g, b, true)
end

-- This may be customized
local function canToggleCollectibles()
    return (not isPedDead(localPlayer))
end

local function toggleCollectibles(theType)
    if not canToggleCollectibles() then
        outputCustomText("cant_toggle")
        return
    end
    local info = receivedCollectibles[theType]
    if not info then
        return
    end
    local countAvailable = 0
    for index, spawnpoint in pairs(info.spawnpoints) do
        countAvailable = countAvailable + 1
    end
    local countCollected = info.total - countAvailable
    if countAvailable == 0 then
        outputCustomText("already_collected", theType, info.total)
        return
    end
    if receivedCollectibles[theType].toggled == false then
        -- Create collectibles
        for index, spawnpoint in pairs(info.spawnpoints) do
            local pickup = createPickup(spawnpoint.x, spawnpoint.y, spawnpoint.z, 3, spawnpoint.model)
            if not pickup then
                outputDebugMsg("Failed to create pickup for type '" .. theType .. "' at spawnpoint " .. (index) .. ".", "ERROR")
            else
                spawnedCollectibles[pickup] = {
                    type = theType,
                    index = index,
                }
            end
        end
        outputCustomText("toggle_on", #info.spawnpoints, info.total, theType)
        receivedCollectibles[theType].toggled = true
    else
        -- Destroy collectibles
        local countDel = 0
        for pickup, info2 in pairs(spawnedCollectibles) do
            if info2.type == theType then
                destroyElement(pickup)
                countDel = countDel + 1
                spawnedCollectibles[pickup] = nil
            end
        end
        outputCustomText("toggle_off", countDel, theType)
        receivedCollectibles[theType].toggled = false
    end
end

local function createCollectibles(initial)
    for theType, info in pairs(receivedCollectibles) do
        if (info.toggled == true) then
            -- Auto create collectibles
            for index, spawnpoint in pairs(info.spawnpoints) do
                local pickup = createPickup(spawnpoint.x, spawnpoint.y, spawnpoint.z, 3, spawnpoint.model)
                if not pickup then
                    outputDebugMsg("Failed to create pickup for type '" .. theType .. "' at spawnpoint " .. (index) .. ".", "ERROR")
                else
                    spawnedCollectibles[pickup] = {
                        type = theType,
                        index = index,
                    }
                end
            end
        end
        if (initial == true) then
            if info.toggle_keybind then
                outputConsole("Keybind set: "..(string.upper(info.toggle_keybind)))
                bindKey(info.toggle_keybind, "down", function()
                    toggleCollectibles(theType)
                end)
            end
            if info.toggle_command then
                outputConsole("Command set: /"..info.toggle_command)
                addCommandHandler(info.toggle_command, function(cmd)
                    toggleCollectibles(theType)
                end, false, false)
            end
        end
    end
end

local function onPickupHit(thePlayer)
    if thePlayer ~= localPlayer then return end
    if not spawnedCollectibles then return end
    local collectibleInfo = spawnedCollectibles[source]
    if not collectibleInfo then return end
    if (getElementDimension(localPlayer) ~= getElementDimension(source) or getElementInterior(localPlayer) ~= getElementInterior(source)) then return end
    local theType = collectibleInfo.type
    local index = collectibleInfo.index
    receivedCollectibles[theType].spawnpoints[index] = nil
    destroyElement(source)
    spawnedCollectibles[source] = nil
    triggerServerEvent("collectibles:handlePickedUp", localPlayer, collectibleInfo)
end
addEventHandler("onClientPickupHit", resourceRoot, onPickupHit)

local function actionOnPickedUp(theType, collected, total, action)
    
    local sound = action.sound
    local sound_volume = action.sound_volume
    if sound then
        local soundElement = playSound(sound, false)
        if not soundElement then
            outputDebugMsg("Failed to play sound '" .. sound .. "'.", "ERROR")
        else
            setSoundVolume(soundElement, sound_volume)
        end
    end
    local name = action.name
    if name == "collect_one" then
        outputCustomText("collect_one", collected, total, theType)
    elseif name == "collect_all" then
        outputCustomText("collect_all", total, theType)
    end
end
addEventHandler("collectibles:actionOnPickedUp", localPlayer, actionOnPickedUp)

addEventHandler("collectibles:receive", localPlayer, function(list, texts_)
    if type(list) ~= "table" then
        return
    end
    receivedCollectibles = list
    texts = texts_

    local initial = true
    if type(spawnedCollectibles) == "table" then
        initial = false
        for pickup, info in pairs(spawnedCollectibles) do
            destroyElement(pickup)
        end
    end

    spawnedCollectibles = {}
    createCollectibles(initial)

end)

addEventHandler("collectibles:spawn", localPlayer, function(theType, index, spawnpoint)
    if not receivedCollectibles[theType] then
        return
    end
    if type(spawnpoint) ~= "table" then
        return
    end
    receivedCollectibles[theType].spawnpoints[index] = {
        index = index,
        x = spawnpoint.x,
        y = spawnpoint.y,
        z = spawnpoint.z,
        model = spawnpoint.model,
    }

    if receivedCollectibles[theType].toggled ~= true then
        return
    end
    local pickup = createPickup(spawnpoint.x, spawnpoint.y, spawnpoint.z, 3, spawnpoint.model)
    if not pickup then
        outputDebugMsg("Failed to create pickup for type '" .. theType .. "' at spawnpoint " .. (index) .. ".", "ERROR")
    else
        spawnedCollectibles[pickup] = {
            type = theType,
            index = index,
        }
        outputCustomText("respawned", theType, index)
    end
end)
